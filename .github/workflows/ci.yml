name: TallyIO CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 02:00 UTC for dependency updates
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize for AMD EPYC 9454P (production target)
  RUSTFLAGS: "-C target-cpu=znver3 -C target-feature=+avx2,+fma,+bmi2"

jobs:
  # ============================================================================
  # ULTRA-STRICT CLIPPY VALIDATION
  # ============================================================================
  clippy:
    name: 🔍 Ultra-Strict Clippy
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
        
    - name: 📦 Cache Cargo Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-clippy-
          ${{ runner.os }}-cargo-
          
    - name: 🔍 Run Ultra-Strict Clippy
      run: |
        cargo clippy --all-targets --all-features --workspace -- \
          -v \
          -D warnings \
          -D clippy::all \
          -D clippy::pedantic \
          -D clippy::nursery \
          -D clippy::cargo \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::panic \
          -D clippy::todo \
          -D clippy::unimplemented \
          -D clippy::unreachable \
          -D clippy::indexing_slicing \
          -D clippy::integer_division \
          -D clippy::arithmetic_side_effects \
          -D clippy::float_arithmetic \
          -D clippy::modulo_arithmetic \
          -D clippy::lossy_float_literal \
          -D clippy::cast_possible_truncation \
          -D clippy::cast_precision_loss \
          -D clippy::cast_sign_loss \
          -D clippy::cast_possible_wrap \
          -D clippy::cast_lossless \
          -D clippy::mem_forget \
          -D clippy::rc_mutex \
          -D clippy::await_holding_lock \
          -D clippy::await_holding_refcell_ref \
          -D clippy::let_underscore_must_use \
          -D clippy::let_underscore_untyped \
          -D clippy::must_use_candidate \
          -D clippy::missing_asserts_for_indexing \
          -D clippy::panic_in_result_fn \
          -D clippy::string_slice \
          -D clippy::str_to_string \
          -D clippy::verbose_file_reads \
          -D clippy::manual_ok_or \
          -D clippy::unnecessary_safety_comment \
          -D clippy::unnecessary_safety_doc \
          -D clippy::undocumented_unsafe_blocks \
          -D clippy::impl_trait_in_params \
          -D clippy::clone_on_ref_ptr \
          -D clippy::manual_let_else \
          -D clippy::unseparated_literal_suffix \
          -A clippy::missing_docs_in_private_items \
          -A clippy::module_name_repetitions \
          -A clippy::missing_trait_methods \
          -A clippy::wildcard_imports \
          -A clippy::redundant_pub_crate \
          -A clippy::blanket_clippy_restriction_lints

  # ============================================================================
  # COMPREHENSIVE TESTING
  # ============================================================================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    needs: clippy
    
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: 📦 Cache Cargo Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-test-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
          
    - name: 🧪 Run Unit Tests
      run: cargo test --workspace --lib --verbose
      
    - name: 🧪 Run Integration Tests
      run: cargo test --workspace --tests --verbose
      
    - name: 🧪 Run Doc Tests
      run: cargo test --workspace --doc --verbose

  # ============================================================================
  # PERFORMANCE BENCHMARKS
  # ============================================================================
  benchmark:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    needs: [clippy, test]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@nightly
      
    - name: 📦 Cache Cargo Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-bench-
          ${{ runner.os }}-cargo-
          
    - name: ⚡ Run Benchmarks
      run: cargo bench --workspace --verbose
      
    - name: 📊 Upload Benchmark Results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: target/criterion/
        retention-days: 30

  # ============================================================================
  # SECURITY AUDIT
  # ============================================================================
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: 🔒 Install Cargo Audit
      run: cargo install cargo-audit

    - name: 📦 Install jq for JSON parsing
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: 🔍 Run Security Audit
      run: |
        cargo audit --json > audit-report.json
        # Check if vulnerabilities were found
        VULN_COUNT=$(jq -r '.vulnerabilities.count // 0' audit-report.json)
        VULN_FOUND=$(jq -r '.vulnerabilities.found // false' audit-report.json)

        if [ "$VULN_FOUND" = "true" ] || [ "$VULN_COUNT" -gt 0 ]; then
          echo "🚨 Security vulnerabilities found!"
          cat audit-report.json
          exit 1
        else
          echo "✅ No security vulnerabilities found"
          echo "📊 Audit summary:"
          jq -r '.vulnerabilities' audit-report.json
        fi
      
    - name: 🔒 Install Cargo Deny
      run: cargo install cargo-deny
      
    - name: 🚫 Run Cargo Deny
      run: cargo deny check

  # ============================================================================
  # CODE COVERAGE
  # ============================================================================
  coverage:
    name: 📈 Code Coverage
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: test
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: 📦 Install Cargo LLVM Cov
      uses: taiki-e/install-action@cargo-llvm-cov
      
    - name: 📈 Generate Coverage Report
      run: cargo llvm-cov --workspace --lcov --output-path lcov.info
      
    - name: 📤 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true

  # ============================================================================
  # PRODUCTION BUILD VALIDATION
  # ============================================================================
  build:
    name: 🏗️ Production Build
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [clippy, test]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: 📦 Cache Cargo Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-
          
    - name: 🏗️ Build Release
      run: cargo build --workspace --release --verbose
      
    - name: 📦 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-build-${{ github.sha }}
        path: target/release/
        retention-days: 7

  # ============================================================================
  # DEPLOYMENT READINESS CHECK
  # ============================================================================
  deployment-check:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-22.04
    needs: [clippy, test, benchmark, security, coverage, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: ✅ All Checks Passed
      run: |
        echo "🎉 TallyIO is ready for deployment!"
        echo "✅ Ultra-strict clippy passed"
        echo "✅ All tests passed"
        echo "✅ Benchmarks completed"
        echo "✅ Security audit passed"
        echo "✅ Code coverage generated"
        echo "✅ Production build successful"
        echo "🚀 Ready for MEV domination!"

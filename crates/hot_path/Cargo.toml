[package]
name = "hot_path"
version = "0.1.0"
edition = "2021"
authors = ["TallyIO Team"]
description = "Ultra-fast nanosecond-level MEV detection and execution engine"
license = "MIT"
repository = "https://github.com/tallyio/hot_path"
readme = "README.md"
keywords = ["mev", "defi", "crypto", "performance", "simd"]
categories = ["finance", "algorithms", "no-std"]

# Aggressive optimization settings for production
[profile.release]
lto = "fat"                    # Full link-time optimization
codegen-units = 1              # Single codegen unit for maximum optimization
panic = "abort"                # Abort on panic (no unwinding overhead)
opt-level = 3                  # Maximum optimization level
debug = false                  # No debug info in release
strip = true                   # Strip symbols for smaller binary
overflow-checks = false        # Disable overflow checks for performance

# Optimize all dependencies aggressively
[profile.release.package."*"]
opt-level = 3
overflow-checks = false

# Development profile with some optimizations for testing
[profile.dev]
opt-level = 1                  # Some optimization for dev builds
debug = true                   # Keep debug info for development
overflow-checks = true         # Keep overflow checks in dev

# Performance-critical dependencies
[dependencies]
# Core numeric types (no floating point allowed)
rust_decimal = { version = "1.32", default-features = false, features = ["std"] }
rust_decimal_macros = "1.32"

# High-performance collections and utilities
smallvec = { version = "1.11", features = ["const_generics", "const_new"] }
tinyvec = { version = "1.6", features = ["alloc", "rustc_1_55"] }
ahash = { version = "0.8", default-features = false, features = ["std"] }

# Lock-free and atomic primitives
crossbeam = { version = "0.8", default-features = false, features = ["std"] }
crossbeam-utils = "0.8"
crossbeam-channel = "0.5"
crossbeam-queue = "0.3"

# SIMD and vectorization
wide = { version = "0.7", features = ["std"] }
bytemuck = { version = "1.14", features = ["derive", "min_const_generics"] }
aligned-vec = "0.5"

# Memory management and allocation
bumpalo = { version = "3.14", features = ["collections"] }

# Atomic and lock-free data structures
atomic = "0.6"
atomic-waker = "1.1"

# Error handling (production-ready)
thiserror = "1.0"
anyhow = "1.0"

# Serialization (zero-copy where possible)
serde = { version = "1.0", default-features = false, features = ["derive", "alloc"] }
bincode = "1.3"
postcard = { version = "1.0", default-features = false, features = ["alloc"] }

# Cryptographic primitives (for hashing and verification)
blake3 = { version = "1.5", features = ["std", "rayon"] }
sha3 = "0.10"

# Time and measurement using std::time (no external dependencies)
# Removed instant crate due to unmaintained status

# System information
num_cpus = "1.16"

# Optional async support
tokio = { version = "1.35", optional = true, features = ["rt", "sync", "time"] }

# Build dependencies for CPU feature detection
[build-dependencies]
cc = "1.0"
rustc_version = "0.4"

# Feature flags for conditional compilation
[features]
default = ["simd", "std"]

# SIMD optimizations
simd = []
avx2 = ["simd"]
avx512 = ["simd", "avx2"]

# Standard library support
std = []

# Async support
async = ["tokio"]

# Development and testing features
dev = []
bench = []

# Target-specific optimizations
[target.'cfg(target_arch = "x86_64")'.dependencies]
# x86_64 specific SIMD intrinsics
raw-cpuid = "11.0"

# Conditional compilation for different targets
[target.'cfg(target_os = "linux")'.dependencies]
libc = "0.2"

# Documentation settings
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Cargo settings for maximum performance
[package.metadata.cargo-udeps.ignore]
normal = []  # No external time dependencies needed

# Linting configuration
[lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"
unused_imports = "deny"
unused_variables = "deny"

[lints.clippy]
all = { level = "deny", priority = -1 }
pedantic = { level = "deny", priority = -1 }
nursery = { level = "deny", priority = -1 }
cargo = { level = "deny", priority = -1 }
restriction = { level = "deny", priority = -1 }
unwrap_used = "deny"
expect_used = "deny"
panic = "deny"
todo = "deny"
unimplemented = "deny"
# Allow some specific lints that are too restrictive
missing_docs_in_private_items = "allow"
module_name_repetitions = "allow"
missing_trait_methods = "allow"
wildcard_imports = "allow"
redundant_pub_crate = "allow"
blanket_clippy_restriction_lints = "allow"
separated_literal_suffix = "allow"

# Development dependencies for testing and benchmarking
[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }

# Benchmark configuration
[[bench]]
name = "hot_path_benchmarks"
harness = false
path = "../../benches/hot_path_benchmarks.rs"
